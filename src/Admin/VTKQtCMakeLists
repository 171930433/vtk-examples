###CMakeLists.txt
```cmake
cmake_minimum_required(VERSION 3.3 FATAL_ERROR)

if(POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
  cmake_policy(SET CMP0071 NEW)
endif()

PROJECT(XXX)

find_package(VTK COMPONENTS ZZZ
  vtkGUISupportQt
  vtkRenderingQt
  QUIET
)

if(NOT VTK_FOUND)
  message(FATAL_ERROR "XXX: ${VTK_NOT_FOUND_MESSAGE}")
endif()

if(NOT(vtkGUISupportQt_LOADED OR TARGET VTK::GUISupportQt))
  message(FATAL_ERROR "XXX: VTK not built with Qt support.")
endif()

if(NOT DEFINED VTK_QT_VERSION)
  set(VTK_QT_VERSION 5)
endif()

set(qt_components Core Gui Widgets)
if(${VTK_QT_VERSION} VERSION_GREATER_EQUAL 6)
  list(APPEND qt_components OpenGLWidgets)
endif()
list(SORT qt_components)
# We have ui files, so this will also bring in the macro:
#   qt5_wrap_ui or qt_wrap_ui from Widgets.
find_package(Qt${VTK_QT_VERSION} QUIET
  REQUIRED COMPONENTS ${qt_components}
)

foreach(_qt_comp IN LISTS qt_components)
  list(APPEND qt_modules "Qt${VTK_QT_VERSION}::${_qt_comp}")
endforeach()

message (STATUS "VTK_VERSION: ${VTK_VERSION}, Qt Version: ${Qt${VTK_QT_VERSION}Widgets_VERSION}")

if (VTK_VERSION VERSION_LESS "8.90.0")
# Instruct CMake to run moc automatically when needed.
  set(CMAKE_AUTOMOC ON)
else()
# Instruct CMake to run moc and uic automatically when needed.
  set(CMAKE_AUTOMOC ON)
  set(CMAKE_AUTOUIC ON)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

file(GLOB UI_FILES *.ui)
file(GLOB QT_WRAP *.h)
file(GLOB CXX_FILES *.cxx)

# For VTK versions greater than or equal to 8.90.0:
#  CMAKE_AUTOUIC is ON so we handle uic automatically for Qt targets.
#  CMAKE_AUTOMOC is ON so we handle moc automatically for Qt targets.
# However we have to do the following for VTK versions less than 8.90.0,
#  and we also assume, in this case, that Qt5 is being used.
if (VTK_VERSION VERSION_LESS "8.90.0")
  qt5_wrap_ui(UISrcs ${EXAMPLE}.ui)
endif()

if (VTK_VERSION VERSION_LESS "8.90.0")
  # old system
  include(${VTK_USE_FILE})
  # CMAKE_AUTOMOC in ON so the MOC headers will be automatically wrapped.
  add_executable(XXX MACOSX_BUNDLE
    ${CXX_FILES} ${UISrcs} ${QT_WRAP})
  if (Qt${VTK_QT_VERSION}Widgets_VERSION VERSION_LESS "5.11.0")
    qt5_use_modules(XXX ${qt_components})
  else()
    target_link_libraries(XXX ${qt_modules})
  endif()
  target_link_libraries(XXX ${VTK_LIBRARIES})
else()
  # include all components
  # Prevent a "command line is too long" failure in Windows.
  set(CMAKE_NINJA_FORCE_RESPONSE_FILE "ON" CACHE BOOL "Force Ninja to use response files.")
  # CMAKE_AUTOMOC in ON so the MOC headers will be automatically wrapped.
  add_executable(XXX MACOSX_BUNDLE
    ${CXX_FILES} ${UISrcs} ${QT_WRAP})
  if (Qt${VTK_QT_VERSION}Widgets_VERSION VERSION_LESS "5.11.0")
    qt5_use_modules(XXX ${qt_components})
  else()
    target_link_libraries(XXX ${qt_modules})
  endif()
  target_link_libraries(XXX ${VTK_LIBRARIES})
  # vtk_module_autoinit is needed
  vtk_module_autoinit(
    TARGETS XXX
    MODULES ${VTK_LIBRARIES}
  )
endif()
```

###Download and Build XXX
Click [here to download XXX](WWW/raw/gh-pages/Tarballs/XXX.tar) and its *CMakeLists.txt* file.
Once the tarball *XXX.tar* has been downloaded and extracted,
```
 cd XXX/build
```
This example requires Qt and VTK.

If VTK and Qt are installed:
```
 cmake ..
```
If VTK is not installed but compiled on your system, you will need to specify the path to your VTK build:
```
 cmake -DVTK_DIR:PATH=/home/me/vtk_build ..
```
If Qt is not found on your system, you will need to tell CMake where to find qmake:
```
cmake -DQT_QMAKE_EXECUTABLE:FILEPATH=/usr/something/qmake  ..
```

Build the project:
```
make
```
and run it:
```
./XXX
```
!!! note "WINDOWS USERS"
    Be sure to add the VTK bin directory to your path. This will resolve the VTK dll's at run time. You may also need to add a Qt related path.
