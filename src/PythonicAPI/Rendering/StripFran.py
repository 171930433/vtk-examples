#!/usr/bin/env python3

# noinspection PyUnresolvedReferences
import vtkmodules.vtkInteractionStyle
# noinspection PyUnresolvedReferences
import vtkmodules.vtkRenderingOpenGL2
from vtkmodules.vtkCommonColor import vtkNamedColors
from vtkmodules.vtkFiltersCore import (
    vtkDecimatePro,
    vtkMaskPolyData,
    vtkPolyDataNormals,
    vtkStripper
)
from vtkmodules.vtkIOLegacy import vtkPolyDataReader
from vtkmodules.vtkRenderingCore import (
    vtkActor,
    vtkCamera,
    vtkPolyDataMapper,
    vtkRenderWindow,
    vtkRenderWindowInteractor,
    vtkRenderer
)


def main():
    colors = vtkNamedColors()

    file_name = get_program_parameters()

    renderer1 = vtkRenderer(background=colors.GetColor3d('Wheat'), viewport=(0.0, 0.0, 0.5, 1.0))
    renderer2 = vtkRenderer(background=colors.GetColor3d('Papaya_Whip'), viewport=(0.5, 0.0, 1.0, 1.0))
    render_window = vtkRenderWindow(size=(1024, 640), window_name='Papaya_Whip')
    render_window.AddRenderer(renderer1)
    render_window.AddRenderer(renderer2)
    render_window.SetWindowName('StripFran')

    interactor = vtkRenderWindowInteractor()
    interactor.render_window = render_window

    # Create a cyberware source.
    cyber = vtkPolyDataReader(file_name=file_name)

    stripper = vtkStripper()
    stripper_mask = vtkMaskPolyData(on_ratio=2)
    stripper_mapper = vtkPolyDataMapper()
    cyber >> stripper >> stripper_mask >> stripper_mapper
    stripper_actor = vtkActor(mapper=stripper_mapper)
    stripper_actor.property.color = colors.GetColor3d('Flesh')

    deci = vtkDecimatePro(target_reduction=0.7, preserve_topology=True)
    normals = vtkPolyDataNormals()
    mask = vtkMaskPolyData(on_ratio=2)
    cyber_mapper = vtkPolyDataMapper()
    cyber >> deci >> normals >> mask >> cyber_mapper
    cyber_actor = vtkActor(mapper=cyber_mapper)
    cyber_actor.property.color = colors.GetColor3d('Flesh')

    # Add the actors to the renderer, set the background and size.
    renderer1.AddActor(stripper_actor)
    renderer2.AddActor(cyber_actor)

    # Render the image.
    cam1 = vtkCamera()
    cam1.focal_point = (0, 0, 0)
    cam1.position = (1, 0, 0)
    cam1.view_up = (0, 1, 0)
    renderer1.active_camera = cam1
    renderer2.active_camera = cam1
    renderer1.ResetCamera()
    cam1.Azimuth(30)
    cam1.Elevation(30)
    cam1.Dolly(1.4)
    renderer1.ResetCameraClippingRange()

    interactor.Start()


def get_program_parameters():
    import argparse
    description = 'Triangle strip examples.'
    epilogue = '''
    a) Structured triangle mesh consisting of 134 strips each of 390 triangles (stripF.tcl).
    
    b) Unstructured triangle mesh consisting of 2227 strips of average length 3.94,
        longest strip 101 triangles.
        Images are generated by displaying every other triangle strip (uStripeF.tcl).
    '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('filename', help='fran_cut.vtk')
    args = parser.parse_args()
    return args.filename


if __name__ == '__main__':
    main()
